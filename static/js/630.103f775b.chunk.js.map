{"version":3,"file":"static/js/630.103f775b.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/Profile.module.css?b512","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profile\":\"Profile_profile__UraoW\"};","// extracted by mini-css-extract-plugin\nexport default {\"profileInfo\":\"ProfileInfo_profileInfo__cEcwY\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__LlPoU\",\"contact\":\"ProfileInfo_contact__GWXSr\",\"chooseFileInput\":\"ProfileInfo_chooseFileInput__iP+-1\",\"chooseFileButton\":\"ProfileInfo_chooseFileButton__0liEG\",\"editOrSaveInfo\":\"ProfileInfo_editOrSaveInfo__BrV2i\",\"description\":\"ProfileInfo_description__X6AaZ\",\"fullName\":\"ProfileInfo_fullName__Pmr+4\"};","import React, {useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\r\n\r\n    const [editMode, setEditmode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditmode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditmode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: any) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                !editMode &&\r\n                <div>\r\n                    <b>Status: </b><span onDoubleClick={activateEditMode}>{props.status || '-------'}</span>\r\n                </div>\r\n            }\r\n\r\n            {\r\n                editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\r\n                           value={status}></input>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React, {FormEvent} from \"react\";\r\nimport {createField, Input, TextArea} from \"components/common/FormsControls/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {ContactsType} from \"redux/profileReducer\";\r\nimport classes from \"./ProfileInfo.module.css\";\r\nimport styles from \"components/common/FormsControls/FormsControls.module.css\";\r\n\r\n\r\ntype FormDataType = {\r\n    fullName: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    aboutMe: string\r\n}\r\n\r\n\r\ntype ProfileProps = {\r\n    onSubmit: (event: FormDataType) => void\r\n    profile: any\r\n}\r\nconst ProfileDataForm: React.FC<InjectedFormProps<FormDataType, ProfileProps> & ProfileProps> = ({\r\n                                                                                                     handleSubmit,\r\n                                                                                                     profile,\r\n                                                                                                     error\r\n                                                                                                 }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n\r\n\r\n            <div>\r\n                <b>Full name:</b>: {createField('Full name', 'fullName', [], Input, {}, \"\")}\r\n            </div>\r\n\r\n\r\n            <div>\r\n                <b>Looking for a job</b>: {createField('', 'lookingForAJob', [], Input, {type: 'checkbox'}, \"\")}\r\n            </div>\r\n\r\n            <div>\r\n                <b>My professional\r\n                    skills</b>: {createField('My professional skills', 'lookingForAJobDescription', [], TextArea, {}, \"\")}\r\n            </div>\r\n            <div>\r\n                <b>About\r\n                    me</b>: {createField('About me', 'aboutMe', [], TextArea, {}, \"\")}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {(Object.keys(profile.contacts) as (keyof ContactsType)[]).map((key) => {\r\n                return <div key={key} className={classes.contacts}>\r\n                    <b>{key}: {createField('Full name', 'contacts.' + key, [], Input, {}, \"\")}</b>\r\n                </div>\r\n            })}\r\n\r\n                <div>\r\n                    <button className={classes.editOrSaveInfo}>save</button>\r\n                </div>\r\n\r\n                {\r\n                    error\r\n                    &&\r\n                    <div className={styles.formSummaryError}>\r\n                        {error}\r\n                    </div>\r\n                }\r\n\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<FormDataType, ProfileProps>({form: 'editProfile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm","import React, {ChangeEvent, useRef, useState} from 'react';\r\nimport './ProfileInfo.module.css';\r\nimport classes from \"./ProfileInfo.module.css\";\r\nimport Preloader from \"../../common/preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport {ContactsType, ProfileResponseType} from \"redux/profileReducer\";\r\nimport userPhoto from \"../../../assets/images/user.png\";\r\nimport ProfileDataFormReduxForm from \"components/Profile/ProfileInfo/ProfileDataForm\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileResponseType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (formData: any) => any\r\n}\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}: ProfileInfoPropsType) => {\r\n    const ref = useRef<HTMLInputElement | null>(null)\r\n    const [editMode, setEditmode] = useState(false)\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const selectFileHandler = () => {\r\n        ref && ref.current?.click()\r\n    }\r\n    const onMaidPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const handleSubmit = (formData: any) => {\r\n        saveProfile(formData).then(() => {\r\n            setEditmode(false)\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={classes.profileInfo}>\r\n            <div className={classes.descriptionBlock}>\r\n                <img src={profile.photos?.large || userPhoto}/>\r\n                {isOwner &&\r\n                    <input className={classes.chooseFileInput} ref={ref} type={'file'} onChange={onMaidPhotoSelected}/>\r\n                }\r\n                <button className={classes.chooseFileButton} onClick={selectFileHandler}>Change photo</button>\r\n                {\r\n                    editMode\r\n                        ?\r\n                        <ProfileDataFormReduxForm initialValues={profile} profile={profile} onSubmit={handleSubmit}/>\r\n                        :\r\n                        <ProfileData profile={profile} isOwner={isOwner} goToEditMode={() => {\r\n                            setEditmode(true)\r\n                        }}/>\r\n                }\r\n\r\n\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nconst ProfileData = ({profile, isOwner, goToEditMode}: any) => {\r\n    return (\r\n        <div>\r\n            <div className={classes.fullName + ' ' + classes.description}>\r\n                <span><b>Name</b>: {profile.fullName}</span>\r\n            </div>\r\n            <div className={classes.description}>\r\n                <b>Looking for a job</b>: {profile.lookingForAJob ? 'yes' : 'no'}\r\n            </div>\r\n            {\r\n                profile.lookingForAJob &&\r\n                <div className={classes.description}>\r\n                    <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n                </div>\r\n            }\r\n            <div className={classes.description}>\r\n                <b>About me</b>: {profile.aboutMe}\r\n            </div>\r\n            <div className={classes.description}>\r\n                <b>Contacts</b>: {(Object.keys(profile.contacts) as (keyof ContactsType)[]).map((key) => {\r\n                return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n            })}\r\n            </div>\r\n\r\n            {\r\n                isOwner\r\n                &&\r\n                <div>\r\n                    <button className={classes.editOrSaveInfo} onClick={goToEditMode}>Edit info</button>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Contact = ({contactTitle, contactValue}: ContactPropsType) => {\r\n    return (\r\n        <div>\r\n            <b className={classes.contact}>{contactTitle}</b>: {contactValue}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo","// extracted by mini-css-extract-plugin\nexport default {\"posts\":\"MyPosts_posts__so5M3\",\"postsBlock\":\"MyPosts_postsBlock__h8Sj5\",\"blockName\":\"MyPosts_blockName__SYA+I\",\"addPost\":\"MyPosts_addPost__1ojcx\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__HSN9y\"};","import React from 'react';\r\nimport './Post.module.css';\r\nimport classes from \"./Post.module.css\";\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post = (props: PostPropsType) => {\r\n    return (\r\n        <div className={classes.item}>\r\n            <img src=\"https://shapka-youtube.ru/wp-content/uploads/2020/12/ava-anime-11.jpg\" alt=\"\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>like </span>{props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post","import React from 'react';\r\nimport './MyPosts.module.css';\r\nimport classes from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {PostType} from \"redux/profileReducer\";\r\nimport {maxLengthCreator, required} from \"utils/validators/validators\";\r\nimport {TextArea} from \"../../common/FormsControls/FormsControls\";\r\n\r\n\r\ntype MyPostsPropsType = {\r\n    posts: PostType[],\r\n    newPostText: string,\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\n\r\nconst MyPosts = React.memo((props: MyPostsPropsType) => {\r\n    let postsElements = props.posts.map((p: any) => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    let onAddPost = (values: FormDataType) => {\r\n        console.log(values)\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.postsBlock}>\r\n            <div className={classes.blockName}>\r\n                <h3>My posts</h3>\r\n            </div>\r\n            <AddNewPostReduxForm onSubmit={onAddPost}/>\r\n            <div className={classes.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\ntype FormDataType = {\r\n    newPostText: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddNewPostForm = (props: any) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n\r\n            <Field name={\"newPostText\"} component={TextArea} placeholder={'Post message'}\r\n                   validate={[required, maxLength10]}/>\r\n\r\n            <div>\r\n                <button className={classes.addPost}>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostReduxForm = reduxForm<FormDataType>({\r\n    form: 'ProfileAddNewPostForm'\r\n})(AddNewPostForm)\r\n\r\nexport default MyPosts","import React from 'react';\r\nimport './MyPosts.module.css';\r\nimport {addPostAC} from \"../../../redux/profileReducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostAC(newPostText))\r\n        },\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer\r\n","import React from 'react';\r\nimport './Profile.module.css';\r\nimport classes from \"./Profile.module.css\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfilePageType} from \"redux/profileReducer\";\r\n\r\ntype ProfilePropsType = {\r\n    profilePage: ProfilePageType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (formData: any) => void\r\n}\r\n\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <div className={classes.profile}>\r\n            <ProfileInfo savePhoto={props.savePhoto} profile={props.profilePage.profile} status={props.status}\r\n                         updateStatus={props.updateStatus} isOwner={props.isOwner} saveProfile={props.saveProfile}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile","import React from 'react';\r\nimport './Profile.module.css';\r\n\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"redux/redux-store\";\r\nimport {getStatus, getUserProfile, ProfilePageType, savePhoto, saveProfile, updateStatus} from \"redux/profileReducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype PathParamsType = {\r\n    userId: string | undefined\r\n}\r\n\r\ntype mapStateToPropsType = {\r\n    profilePage: ProfilePageType\r\n    status: string\r\n    authorizedUserId: string\r\n    isAuth: boolean\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (formData: any) => void\r\n}\r\n\r\nexport type OwnPropsType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & OwnPropsType\r\n\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n            ? this.props.match.params.userId\r\n            : this.props.authorizedUserId ? this.props.authorizedUserId\r\n                : this.props.history.push(\"/login\")\r\n        if (userId) {\r\n            this.props.getUserProfile(userId)\r\n            this.props.getStatus(userId)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props} profilePage={this.props.profilePage} status={this.props.status}\r\n                     updateStatus={this.props.updateStatus} isOwner={!this.props.match.params.userId}\r\n                     savePhoto={this.props.savePhoto}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => ({\r\n    profilePage: state.profilePage,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId ?? '',\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\ncompose(\r\n    connect(mapStateToProps, {getUserProfile}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n    // withAuthRedirect\r\n)(ProfileContainer)","import React, {Component, ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType): mapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: any) => {\r\n\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n\r\n        return <Component {...restProps as T} />\r\n\r\n    }\r\n\r\n    const ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n\r\n"],"names":["props","useState","editMode","setEditmode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","reduxForm","form","handleSubmit","profile","error","onSubmit","createField","Input","type","TextArea","Object","keys","contacts","map","key","className","classes","styles","ProfileData","isOwner","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","contactTitle","contactValue","onClick","savePhoto","saveProfile","ref","useRef","Preloader","src","photos","large","userPhoto","target","files","length","current","click","initialValues","formData","then","alt","message","likesCount","MyPosts","React","postsElements","posts","p","id","AddNewPostReduxForm","values","console","log","addPost","newPostText","maxLength10","maxLengthCreator","Field","name","component","placeholder","validate","required","connect","state","profilePage","dispatch","addPostAC","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","mapStateToProps","auth","isAuth","compose","withRouter","withAuthRedirect","mapStateToPropsForRedirect","Component","restProps","to"],"sourceRoot":""}