{"version":3,"file":"static/js/3.c4674cef.chunk.js","mappings":"0JACA,MAA0B,yBAA1B,EAAkE,8BAAlE,EAAyG,wBAAzG,EAA6K,0BAA7K,EAAiN,yB,uCCcjN,EAVmB,SAACA,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OACI,gBAAKC,UAAWC,EAAhB,UACI,SAAC,KAAD,CAASC,GAAIJ,EAAb,SAAoBD,EAAMM,UCAtC,EANgB,SAACN,GACb,OACI,gBAAKG,UAAWC,EAAhB,SAAkCJ,EAAMO,W,uCCuC1CC,GAAcC,EAAAA,EAAAA,GAAiB,IAoB/BC,GAAuBC,EAAAA,EAAAA,GAAwB,CACjDC,KAAM,wBADmBD,EAlBqC,SAACX,GAC/D,OACI,kBAAMa,SAAUb,EAAMc,aAAtB,WACI,0BACI,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,GACXC,SAAU,CAACC,EAAAA,EAAUX,GACrBF,KAAM,iBACNc,YAAa,0BAIxB,0BACI,6CAUhB,EApDgB,SAACpB,GACb,IAAIqB,EAAQrB,EAAMsB,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAACC,GAAD,OAAY,SAAC,EAAD,CAAYpB,KAAMoB,EAAEpB,KAAiBJ,GAAIwB,EAAExB,IAAZwB,EAAExB,OACjFyB,EAAmBN,EAAMO,SAASH,KAAI,SAACI,GAAD,OAAY,SAAC,EAAD,CAAStB,QAASsB,EAAEtB,QAAoBL,GAAI2B,EAAE3B,IAAZ2B,EAAE3B,OAO1F,OACI,iBAAKC,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKmB,KAEL,iBAAKpB,UAAWC,EAAhB,WACI,yBAAMuB,KACN,SAACjB,EAAD,CAAsBG,SAXZ,SAACiB,GACnB9B,EAAM+B,YAAYD,EAAOE,0B,mBCFjC,GAAeC,E,QAAAA,KACXC,EAAAA,EAAAA,KAfoB,SAACb,GACrB,MAAO,CACHC,YAAaD,EAAMC,gBAIA,SAACa,GACxB,MAAO,CACHJ,YAAa,SAACC,GACVG,GAASC,EAAAA,EAAAA,GAAcJ,SAO/BK,EAAAA,EAFJ,CAGEC,I,gICjBIC,EAA6B,SAAClB,GAAD,MAA+C,CAC9EmB,OAAQnB,EAAMoB,KAAKD,SAGhB,SAASH,EAAoBK,GAchC,OAFuCR,EAAAA,EAAAA,IAAQK,EAARL,EAVb,SAAClC,GAEvB,IAAKwC,EAAwBxC,EAAxBwC,OAAWG,GAAhB,OAA6B3C,EAA7B,GAEA,OAAKwC,GAEE,SAACE,GAAD,UAAeC,KAFF,SAAC,KAAD,CAAUtC,GAAI","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__kzvVE\",\"dialogsItems\":\"Dialogs_dialogsItems__M4IAH\",\"dialog\":\"Dialogs_dialog__XYqxo\",\"active\":\"Dialogs_active__9A3tz\",\"messages\":\"Dialogs_messages__RV+ZS\",\"message\":\"Dialogs_message__zamnb\"};","import React from 'react';\r\nimport classes from \"./../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {DialogType} from \"redux/dialogsReducer\";\r\n\r\nconst DialogItem = (props: DialogType) => {\r\n    let path = '/dialogs/' + props.id\r\n\r\n    return (\r\n        <div className={classes.dialog}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem\r\n","import React from 'react';\r\nimport classes from \"./../Dialogs.module.css\";\r\nimport {MessageType} from \"redux/dialogsReducer\";\r\n\r\nconst Message = (props: MessageType) => {\r\n    return (\r\n        <div className={classes.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message\r\n","import React from 'react';\r\nimport './Dialogs.module.css';\r\nimport classes from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {DialogsPageType} from \"redux/dialogsReducer\";\r\nimport {TextArea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"utils/validators/validators\";\r\n\r\n\r\ntype DialogsPropsType = {\r\n    updateNewMessageBody: (body: string) => void\r\n    sendMessage: (newMessageBody: string) => void\r\n    dialogsPage: DialogsPageType\r\n}\r\n\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n    let state = props.dialogsPage\r\n\r\n    let dialogsElements = state.dialogs.map((d: any) => <DialogItem name={d.name} key={d.id} id={d.id}/>)\r\n    let messagesElements = state.messages.map((m: any) => <Message message={m.message} key={m.id} id={m.id}/>)\r\n    // let newMessageBody = state.newMessageBody\r\n\r\n    const addNewMessage = (values: any) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={classes.messages}>\r\n                <div>{messagesElements}</div>\r\n                <AddMMessageReduxForm onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype FormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props: any) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={TextArea}\r\n                       validate={[required, maxLength50]}\r\n                       name={\"newMessageBody\"}\r\n                       placeholder={'Enter your message'}\r\n                >\r\n                </Field>\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMMessageReduxForm = reduxForm<FormDataType>({\r\n    form: 'dialogAddMessageForm'\r\n})(AddMessageForm)\r\n\r\nexport default Dialogs\r\n","import React from 'react';\r\nimport './Dialogs.module.css';\r\nimport {sendMessageAC} from \"redux/dialogsReducer\";\r\nimport {AppStateType} from \"redux/redux-store\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n    return {\r\n        sendMessage: (newMessageBody: string) => {\r\n            dispatch(sendMessageAC(newMessageBody))\r\n        },\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n","import React, {Component, ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType): mapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: any) => {\r\n\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n\r\n        return <Component {...restProps as T} />\r\n\r\n    }\r\n\r\n    const ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n\r\n"],"names":["props","path","id","className","classes","to","name","message","maxLength50","maxLengthCreator","AddMMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","TextArea","validate","required","placeholder","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","values","sendMessage","newMessageBody","compose","connect","dispatch","sendMessageAC","withAuthRedirect","Dialogs","mapStateToPropsForRedirect","isAuth","auth","Component","restProps"],"sourceRoot":""}