{"version":3,"file":"static/js/445.f451d51a.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/Profile.module.css?b512","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profile\":\"Profile_profile__UraoW\"};","// extracted by mini-css-extract-plugin\nexport default {\"profileInfo\":\"ProfileInfo_profileInfo__cEcwY\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__LlPoU\"};","import React, {ChangeEventHandler, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\r\n\r\n    const [editMode, setEditmode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditmode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditmode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: any) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                !editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status || '-------'}</span>\r\n                </div>\r\n            }\r\n\r\n            {\r\n                editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\r\n                           value={status}></input>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport './ProfileInfo.module.css';\r\nimport classes from \"./ProfileInfo.module.css\";\r\nimport Preloader from \"../../common/preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport {ProfileResponseType} from \"./../../../redux/profileReducer\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileResponseType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus}: ProfileInfoPropsType) => {\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div className={classes.profileInfo}>\r\n            <div className={classes.descriptionBlock}>\r\n                <img src={profile.photos?.large}/>\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n            <div>\r\n                name: {profile.fullName}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo","// extracted by mini-css-extract-plugin\nexport default {\"posts\":\"MyPosts_posts__so5M3\",\"postsBlock\":\"MyPosts_postsBlock__h8Sj5\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__HSN9y\"};","import React from 'react';\r\nimport './Post.module.css';\r\nimport classes from \"./Post.module.css\";\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post = (props: PostPropsType) => {\r\n    return (\r\n        <div className={classes.item}>\r\n            <img src=\"https://shapka-youtube.ru/wp-content/uploads/2020/12/ava-anime-11.jpg\" alt=\"\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>like </span>{props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post","import React from 'react';\r\nimport './MyPosts.module.css';\r\nimport classes from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {PostType} from \"../../../redux/profileReducer\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {TextArea} from \"../../common/FormsControls/FormsControls\";\r\n\r\n\r\ntype MyPostsPropsType = {\r\n    posts: PostType[],\r\n    newPostText: string,\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\n\r\nconst MyPosts = React.memo((props: MyPostsPropsType) => {\r\n    let postsElements = props.posts.map((p: any) => <Post message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    let onAddPost = (values: FormDataType) => {\r\n        console.log(values)\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostReduxForm onSubmit={onAddPost}/>\r\n            <div className={classes.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\ntype FormDataType = {\r\n    newPostText: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddNewPostForm = (props: any) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n\r\n            <Field name={\"newPostText\"} component={TextArea} placeholder={'Post message'}\r\n                   validate={[required, maxLength10]}/>\r\n\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostReduxForm = reduxForm<FormDataType>({\r\n    form: 'ProfileAddNewPostForm'\r\n})(AddNewPostForm)\r\n\r\nexport default MyPosts","import React from 'react';\r\nimport './MyPosts.module.css';\r\nimport {addPostAC} from \"../../../redux/profileReducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostAC(newPostText))\r\n        },\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer\r\n","import React from 'react';\r\nimport './Profile.module.css';\r\nimport classes from \"./Profile.module.css\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfilePageType} from \"../../redux/profileReducer\";\r\n\r\ntype ProfilePropsType = {\r\n    profilePage: ProfilePageType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <div className={classes.profile}>\r\n            <ProfileInfo profile={props.profilePage.profile} status={props.status}\r\n                         updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile","import React from 'react';\r\nimport './Profile.module.css';\r\n\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {getStatus, getUserProfile, ProfilePageType, updateStatus} from \"../../redux/profileReducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype PathParamsType = {\r\n    userId: string | undefined\r\n}\r\n\r\ntype mapStateToPropsType = {\r\n    profilePage: ProfilePageType\r\n    status: string\r\n    authorizedUserId: string\r\n    isAuth: boolean\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport type OwnPropsType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & OwnPropsType\r\n\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n            ? this.props.match.params.userId\r\n            : this.props.authorizedUserId ? this.props.authorizedUserId\r\n                : this.props.history.push(\"/login\")\r\n        if (userId) {\r\n            this.props.getUserProfile(userId)\r\n            this.props.getStatus(userId)\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props} profilePage={this.props.profilePage} status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}/>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => ({\r\n    profilePage: state.profilePage,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId ?? '',\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\ncompose(\r\n    connect(mapStateToProps, {getUserProfile}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\r\n    withRouter,\r\n    // withAuthRedirect\r\n)(ProfileContainer)","import React, {Component, ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType): mapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: any) => {\r\n\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n\r\n        return <Component {...restProps as T} />\r\n\r\n    }\r\n\r\n    const ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n\r\n"],"names":["props","useState","editMode","setEditmode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","profile","className","classes","src","photos","large","fullName","Preloader","alt","message","likesCount","MyPosts","React","postsElements","posts","map","p","AddNewPostReduxForm","onSubmit","values","console","log","addPost","newPostText","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","name","component","TextArea","placeholder","validate","required","connect","state","profilePage","dispatch","addPostAC","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","mapStateToProps","auth","isAuth","compose","withRouter","withAuthRedirect","mapStateToPropsForRedirect","Component","restProps","to"],"sourceRoot":""}